<%= @question.errors.full_messages.join(', ') %>
<%# 2We use form_for when we're creating a form related to a Rails Model. the first argumenet of the form_for must be an ActiveRecord object. if the first arguement is a new instance of the ActiveRecord class, for example, Question.new the the form will automatically send a POST request to the standard create action url which is in this case: questions_path %>

<%# if the object you pass to the form_for is persisted (has an id in the DB) then rails will automatically make the form submit a PATCH request with URL in this case question_pathh(@question) (same as show link with PATCH request).
@question variable is persisted in this case so it will have a title and a body so those will be pre-populated in their respective fields %>
<%= form_for @question do |f| %>
  <div>
    <%# We can use f.label and f.text_field to generate a label/text input group, in this case 'title' must be an atrribute for the variable you pass to form_for which is @question in this case.
    The label will have a 'for' atrribute that matches the ID of the generated input field for the title.
    he title input field will have a name attribute that is model_type_[field]. In the example below the 'name' attribute for the input field will be question[title]
    The input field will be prepopulated with a value if the @question has that attribute value set to something%>
    <%= f.label :title %>
    <%= f.text_field :title %>
  </div>

  <div>
    <%= f.label :body %>
    <%= f.text_area :body %>
  </div>

  <% #this will automatically generate a submit button. The label for the button will depend on the '@question' variable. If @question is a new instance then the label of the button will be 'Create @{model name capitalized}' If you're not happy with the label, you can pass the label as a first arguement: f.submit 'Create' %>
  <%= f.submit %>
<% end %>
